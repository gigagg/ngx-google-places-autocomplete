{"version":3,"sources":["../../src/objects/latLngBounds.ts"],"names":[],"mappings":"AAAA;;;GAGG","file":"latLngBounds.js","sourceRoot":"","sourcesContent":["/**\n * A LatLngBounds instance represents a rectangle in geographical coordinates, including one\n * that crosses the 180 degrees longitudinal meridian.\n */\n\nimport { LatLng, LatLngBoundsLiteral, LatLngLiteral } from './latLng';\n\nexport interface LatLngBounds {\n    /** Returns true if the given lat/lng is in this bounds. */\n    contains(latLng: LatLng | LatLngLiteral): boolean;\n\n    /** Returns true if this bounds approximately equals the given bounds. */\n    equals(other: LatLngBounds | LatLngBoundsLiteral): boolean;\n\n    /** Extends this bounds to contain the given point. */\n    extend(point: LatLng | LatLngLiteral): LatLngBounds;\n\n    /** Computes the center of this LatLngBounds */\n    getCenter(): LatLng;\n\n    /** Returns the north-east corner of this bounds. */\n    getNorthEast(): LatLng;\n\n    /** Returns the south-west corner of this bounds. */\n    getSouthWest(): LatLng;\n\n    /** Returns true if this bounds shares any points with the other bounds. */\n    intersects(other: LatLngBounds | LatLngBoundsLiteral): boolean;\n\n    /** Returns if the bounds are empty. */\n    isEmpty(): boolean;\n\n    /** Converts to JSON representation. This function is intended to be used via JSON.stringify. */\n    toJSON(): LatLngBoundsLiteral;\n\n    /** Converts the given map bounds to a lat/lng span. */\n    toSpan(): LatLng;\n\n    /** Converts to string. */\n    toString(): string;\n\n    /**\n     * Returns a string of the form \"lat_lo,lng_lo,lat_hi,lng_hi\" for this bounds, where \"lo\" corresponds to the\n     * southwest corner of the bounding box, while \"hi\" corresponds to the northeast corner of that box.\n     */\n    toUrlValue(precision?: number): string;\n\n    /** Extends this bounds to contain the union of this and the given bounds. */\n    union(other: LatLngBounds | LatLngBoundsLiteral): LatLngBounds;\n}"]}